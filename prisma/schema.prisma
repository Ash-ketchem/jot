// This is your Prisma schema file, 
// learn more about it in the docs: https://pris.ly/d/prisma-schema 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  username        String?  @unique
  bio             String?
  email           String   @unique
  image           String?
  coverImage      String?
  profileImage    String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  followingIds    String[] @default([])
  emailVerified   Boolean  @default(false)
  hasNotification Boolean?
  role            String   @default("user")

  // relations 

  posts        Post[]
  comments     Comment[]
  notification Notification[]
  bookmarks    Bookmark[]
  token        Verification?
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  // uniqueId  String   @unique @default(uuid()) // for liking posts
  body      String?
  images    Json     @default("[]")
  videos    String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  likeIds   String[] @db.ObjectId

  // to be updated
  // likeIds   String[] @default([])

  comments  Comment[]
  bookmarks Bookmark[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  postId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Verification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  token       String   @unique
  resendCount Int      @default(3)
  retryCount  Int      @default(3)
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
