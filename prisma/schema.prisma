// This is your Prisma schema file, 
// learn more about it in the docs: https://pris.ly/d/prisma-schema 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  username         String?   @unique
  bio              String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  coverImage       String?
  profileImage     String?
  hashedPassword   String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  followingIds     String[]  @db.ObjectId
  hashNotification Boolean?

  // relations 

  posts        Post[]
  comments     Comment[]
  notification Notification[]
  bookmarks    Bookmark[]
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  images    String[] @default([])
  videos    String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  likeIds   String[] @db.ObjectId

  comments  Comment[]
  bookmarks Bookmark[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bookmark {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  postId String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Verification {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  token String @unique
  resendCount Int @default(3)
  retryCount Int @default(3)
  expirationTime DateTime 

}

// const newVerification = await prisma.verification.create({
//   data: {
//     // ...
//     expirationTime: new Date(Date.now() + 24*60*60*1000), // current time + 24 hours
//     // ...
//   },
// });
